async function buyItemController(req, res) {
  const transactionClient = await pgClient.connect();
  try {
    const buyQueryText =
      "INSERT INTO purchases(item_id,user_id,date_of_order,item_price,status) VALUES ($1,$2,$3,$4,$5) RETURNING *";
    const buyRes = await pgClient.query(buyQueryText, [
      req.body.item_id,
      req.body.user_id,
      req.body.date_of_order,
      req.body.item_price,
      req.body.status,
    ]);
    await transactionClient.query("BEGIN");
    const itemCountQueryText =
      "UPDATE items SET item_count = item_count-1 WHERE item_id= $1 RETURNING *";
    const itemCountRes = await transactionClient.query(itemCountQueryText, [
      buyRes.rows[0].item_id,
    ]);

    if (itemCountRes) {
      await transactionClient.query("COMMIT");
    }

    res.json({
      rows: buyRes.rows,
      buyResCount: buyRes.rowCount,
      itemUpdate: itemCountRes.rows,
      itemUpdateCount: itemCountRes.rowCount,
    });
  } catch (err) {
    await transactionClient.query("ROLLBACK");
    console.log("Error in Transaction:", err);
    res.status(500).json({ error: "Error in transaction" });
  } finally {
    transactionClient.release();
  }
}

------------------------------------------------------|
Important Notice:                                     |
Configure pg client as a pool                         |
------------------------------------------------------|
